{"version":3,"sources":["App.js","components/Header/Header.js","serviceWorker.js","index.js"],"names":["APIList","Component","state","apiList","fetchAPI","url","fetch","then","response","json","getResponseDetail","data","endpoint","react_default","a","createElement","Form","Field","Radio","Object","assign","label","labelPosition","toggle","enable","defaultChecked","style","display","justifyContent","alignItems","Input","value","concat","id","action","color","icon","content","Label","disabled","Select","compact","options","key","text","defaultValue","method","TextArea","autoHeight","placeholder","minHeight","JSON","stringify","header","json_response","getApiContent","dataItems","items","map","title","_this","marginLeft","timeout","is_random","Accordion","panels","getComputeApiListForAccordion","objectSpread","name","this","Promise","all","_ref","_this2","apiDetail","setState","_ref2","res","objectWithoutProperties","_ref3","find","console","log","class","Button","defaultActiveIndex","styled","App","App_APIList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be03a3c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Accordion, Button, Radio, Form, Input, Select, Label, TextArea } from 'semantic-ui-react'\n\nimport { Header } from './components/Header'\n\n\n\n\n// const AccordionExampleNested = () => <Accordion defaultActiveIndex={0} panels={rootPanels} styled />\n\n\nclass APIList extends Component {\n\n  state = {\n    apiList: [],\n  }\n\n  async componentDidMount() {\n    const apiList = await this.fetchAPI('http://localhost:5001/just-mock/us-central1/api/v1/')\n    const apiDetail = await Promise.all(apiList.data.map(({ id }) => this.fetchAPI(`http://localhost:5001/just-mock/us-central1/api/v1/${id}?view=true`)))\n    \n    this.setState({\n      apiList: apiList.data.map(({ id, ...res }) => ({\n        ...res,\n        id,\n        name: id,\n        ...apiDetail.map(({ data }) => data).find(value => value.id === id)\n      }))\n    })\n  }\n\n  fetchAPI = (url) => fetch(url).then(response => response.json())\n\n  getResponseDetail = (data, endpoint) => {\n    const options = [\n      { key: 'GET', text: 'GET', value: 'GET' },\n      { key: 'POST', text: 'POST', value: 'POST' },\n      { key: 'PUT', text: 'PUT', value: 'PUT' },\n      { key: 'DELETE', text: 'DELETE', value: 'DELETE' },\n    ]\n    return (\n      <div>\n        <Form.Field>\n          <Radio label=\"Enable for random response\" labelPosition=\"left\" toggle {...data.enable && { defaultChecked: true }} />\n        </Form.Field>\n        <br/>\n        <Form.Field style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Input\n            labelPosition='right'\n            value={`https://us-central1-just-mock.cloudfunctions.net/api/v1/${endpoint}/${data.id}`}  \n            action={{ color: 'teal', labelPosition: 'right', icon: 'copy', content: 'Copy' }}\n          >\n            <Label disabled>Method</Label>\n            <Select compact options={options} defaultValue={data.method} />\n          </Input>\n          <Input\n            action={{ color: 'teal', labelPosition: 'right', icon: 'copy', content: 'Copy' }}\n            value={`https://us-central1-just-mock.cloudfunctions.net/api/v1/${endpoint}/${data.id}`}  \n          />\n        </Form.Field>\n        <br/>\n        <Form>\n          <Label>Header</Label>\n          <TextArea\n            autoHeight\n            label='Header'\n            labelPosition='left'\n            placeholder='Header'\n            style={{ minHeight: 100 }}\n            defaultValue={JSON.stringify(data.header)}\n          />\n        </Form>\n        <br/>\n        <Form>\n          <Label>Json response</Label>\n          <TextArea\n            autoHeight\n            label='Json response'\n            labelPosition='left'\n            placeholder='Json response'\n            style={{ minHeight: 100 }}\n            defaultValue={JSON.stringify(data.json_response)}\n          />\n        </Form>\n      </div>\n    )\n  }\n\n  getApiContent = (data) => {\n    let dataItems\n\n    if (data.items ) {\n      // {\n      //   \"id\": \"failure\",\n      //   \"header\": {},\n      //   \"enable\": true,\n      //   \"method\": \"GET\",\n      //   \"json_response\": {\n      //       \"error\": {\n      //           \"message\": \"data not found.\"\n      //       },\n      //       \"code\": \"400\"\n      //   }\n      dataItems = data.items.map(value => ({\n        key: `${data.id}${value.id}`,\n        title: value.id,\n        content: { content: this.getResponseDetail(value, data.id) },\n      }))\n    }\n\n    return (\n      <div>\n        <Form.Field style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', marginLeft: 26 }}>\n          <Input\n            action={{ color: 'teal', labelPosition: 'right', icon: 'copy', content: 'Copy' }}\n            value={`https://us-central1-just-mock.cloudfunctions.net/api/v1/${data.id}`}  \n          />\n        </Form.Field>\n        <br />\n        <Form.Field style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center' }}>\n          <Input\n            label='Timeout'\n            labelPosition='right'\n            placeholder='Timeout'\n            value={data.timeout}\n          />\n          <Radio label=\"Random response\" labelPosition=\"left\" toggle {...data.is_random && { defaultChecked: true }} />\n        </Form.Field>\n        {data.items && (\n          <Accordion.Accordion panels={dataItems} />\n        )}\n      </div>\n    )\n  }\n\n  getComputeApiListForAccordion = () => {\n    return this.state.apiList.map(data => {\n      return {\n        ...data,\n        key: data.id,\n        title: data.name,\n        content: { content: this.getApiContent(data) },\n      }\n    })\n  }\n\n  render() {\n    console.log('response', this.state.apiList)\n\n    return (\n      <div>\n        <div class=\"ui raised very padded text container segment\">\n          <h2 class=\"ui header\">Just Mock Api</h2>\n         \n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n            <Button>Add new endpoint</Button>\n          </div>\n          <br />\n          <Accordion\n            defaultActiveIndex={0}\n            panels={this.getComputeApiListForAccordion()}\n            styled\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* <Header /> */}\n        <APIList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { Header, Segment, Menu, Input, Grid } from 'semantic-ui-react'\n\n\nclass MenuExampleSecondary extends Component {\n  state = { activeItem: 'home' }\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render() {\n    const { activeItem } = this.state\n\n    return (\n      <Menu secondary>\n        <Menu.Header as='h2' floated='left' style={{ marginTop: 15, marginRight: 30 }}>\n          JUST MOCK\n        </Menu.Header>\n        {/* <Menu.Item\n          name='หน้าหลัก'\n          active={activeItem === 'หน้าหลัก'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='แพงใหม่ล่าสุด'\n          active={activeItem === 'แพงใหม่ล่าสุด'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='ติดต่องาน'\n          active={activeItem === 'ติดต่องาน'}\n          onClick={this.handleItemClick}\n        /> */}\n        <Menu.Menu position='right'>\n          {/* <Menu.Item>\n            <Input icon='search' placeholder='Search...' />\n          </Menu.Item>\n          <Menu.Item\n            name='logout'\n            active={activeItem === 'logout'}\n            onClick={this.handleItemClick}\n          /> */}\n        </Menu.Menu>\n      </Menu>\n    )\n  }\n}\n\nconst HeaderExampleFloating = () => (\n  <Segment clearing>\n    <Grid columns={1}>\n      <Grid.Row>\n        <Grid.Column width={2} />\n        <Grid.Column width={12}>\n          <MenuExampleSecondary />\n        </Grid.Column>\n        <Grid.Column width={2} />\n      </Grid.Row>\n    </Grid>\n  </Segment>\n)\n\nexport default HeaderExampleFloating","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}